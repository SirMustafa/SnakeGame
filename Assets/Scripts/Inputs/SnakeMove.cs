//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/SnakeMove.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SnakeMove: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SnakeMove()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SnakeMove"",
    ""maps"": [
        {
            ""name"": ""Snake"",
            ""id"": ""ec4d16f2-7360-4a69-872b-b5713ffbe8cc"",
            ""actions"": [
                {
                    ""name"": ""TopdownMovement"",
                    ""type"": ""Value"",
                    ""id"": ""92b12353-d4ad-4b8f-a3a2-96fb4bc00e4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""634f112c-f30f-4a66-9b98-b3243a3e3410"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopdownMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e843cffd-79f2-4e4b-8def-db2fd25ef342"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopdownMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e758c8f3-fd60-4236-b82e-f60dfdd58ccf"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopdownMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c485cea2-22ad-4443-ae37-3c030f090391"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopdownMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a899410-a4a5-420b-b69f-3861959348a4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopdownMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Snake
        m_Snake = asset.FindActionMap("Snake", throwIfNotFound: true);
        m_Snake_TopdownMovement = m_Snake.FindAction("TopdownMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Snake
    private readonly InputActionMap m_Snake;
    private List<ISnakeActions> m_SnakeActionsCallbackInterfaces = new List<ISnakeActions>();
    private readonly InputAction m_Snake_TopdownMovement;
    public struct SnakeActions
    {
        private @SnakeMove m_Wrapper;
        public SnakeActions(@SnakeMove wrapper) { m_Wrapper = wrapper; }
        public InputAction @TopdownMovement => m_Wrapper.m_Snake_TopdownMovement;
        public InputActionMap Get() { return m_Wrapper.m_Snake; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeActions set) { return set.Get(); }
        public void AddCallbacks(ISnakeActions instance)
        {
            if (instance == null || m_Wrapper.m_SnakeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SnakeActionsCallbackInterfaces.Add(instance);
            @TopdownMovement.started += instance.OnTopdownMovement;
            @TopdownMovement.performed += instance.OnTopdownMovement;
            @TopdownMovement.canceled += instance.OnTopdownMovement;
        }

        private void UnregisterCallbacks(ISnakeActions instance)
        {
            @TopdownMovement.started -= instance.OnTopdownMovement;
            @TopdownMovement.performed -= instance.OnTopdownMovement;
            @TopdownMovement.canceled -= instance.OnTopdownMovement;
        }

        public void RemoveCallbacks(ISnakeActions instance)
        {
            if (m_Wrapper.m_SnakeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISnakeActions instance)
        {
            foreach (var item in m_Wrapper.m_SnakeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SnakeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SnakeActions @Snake => new SnakeActions(this);
    public interface ISnakeActions
    {
        void OnTopdownMovement(InputAction.CallbackContext context);
    }
}
